// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PK.DataAccess;

namespace PK.DataAccess.Migrations
{
    [DbContext(typeof(DataAccessContext))]
    [Migration("20210824035835_PopulateMoveMetaAilmentsAndMoveMetaAilmentNames")]
    partial class PopulateMoveMetaAilmentsAndMoveMetaAilmentNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PK.Common.Models.ContestEffect", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Appeal")
                        .HasColumnType("int");

                    b.Property<int>("Jam")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContestEffects");
                });

            modelBuilder.Entity("PK.Common.Models.ContestEffectProse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ContestEffectId")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FlavorText")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContestEffectId");

                    b.HasIndex("LocalLanguageId");

                    b.ToTable("ContestEffectProse");
                });

            modelBuilder.Entity("PK.Common.Models.ContestType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ContestTypes");
                });

            modelBuilder.Entity("PK.Common.Models.ContestTypeName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ContestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Flavor")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContestTypeId");

                    b.HasIndex("LocalLanguageId");

                    b.ToTable("ContestTypeNames");
                });

            modelBuilder.Entity("PK.Common.Models.Generation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MainRegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainRegionId");

                    b.ToTable("Generations");
                });

            modelBuilder.Entity("PK.Common.Models.GenerationName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("GenerationId")
                        .HasColumnType("int");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("GenerationId", "LocalLanguageId")
                        .IsUnique();

                    b.ToTable("GenerationNames");
                });

            modelBuilder.Entity("PK.Common.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsOficial")
                        .HasColumnType("bit");

                    b.Property<string>("Iso3166")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Iso639")
                        .HasColumnType("varchar(5)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("PK.Common.Models.LanguageName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocalLanguageId");

                    b.ToTable("LanguageNames");
                });

            modelBuilder.Entity("PK.Common.Models.Move", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("ContestEffectId")
                        .HasColumnType("int");

                    b.Property<int>("ContestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DamageClassId")
                        .HasColumnType("int");

                    b.Property<int>("EffectChance")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.Property<int>("GenerationId")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("PowerPoints")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SuperContestEffectId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContestEffectId");

                    b.HasIndex("ContestTypeId");

                    b.HasIndex("DamageClassId");

                    b.HasIndex("EffectId");

                    b.HasIndex("GenerationId");

                    b.HasIndex("SuperContestEffectId");

                    b.HasIndex("TargetId");

                    b.HasIndex("TypeId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("PK.Common.Models.MoveBattleStyle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MoveBattleStyles");
                });

            modelBuilder.Entity("PK.Common.Models.MoveBattleStyleProse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MoveBattleStyleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("MoveBattleStyleId");

                    b.ToTable("MoveBattleStyleProses");
                });

            modelBuilder.Entity("PK.Common.Models.MoveDamageClass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MoveDamageClasses");
                });

            modelBuilder.Entity("PK.Common.Models.MoveDamageClassProse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MoveDamageClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("MoveDamageClassId");

                    b.ToTable("MoveDamageClassProses");
                });

            modelBuilder.Entity("PK.Common.Models.MoveEffect", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MoveEffects");
                });

            modelBuilder.Entity("PK.Common.Models.MoveEffectProse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MoveEffectId")
                        .HasColumnType("int");

                    b.Property<string>("ShortEffect")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("MoveEffectId");

                    b.ToTable("MoveEffectProses");
                });

            modelBuilder.Entity("PK.Common.Models.MoveFlag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MoveFlags");
                });

            modelBuilder.Entity("PK.Common.Models.MoveFlagMap", b =>
                {
                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.Property<int>("MoveFlagId")
                        .HasColumnType("int");

                    b.HasKey("MoveId", "MoveFlagId");

                    b.HasIndex("MoveFlagId");

                    b.ToTable("MoveFlagMaps");
                });

            modelBuilder.Entity("PK.Common.Models.MoveFlagProse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MoveFlagId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("MoveFlagId");

                    b.ToTable("MoveFlagProses");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMeta", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AilmentChance")
                        .HasColumnType("int");

                    b.Property<int>("CritRate")
                        .HasColumnType("int");

                    b.Property<int>("Drain")
                        .HasColumnType("int");

                    b.Property<int>("FlinchChance")
                        .HasColumnType("int");

                    b.Property<int>("Healing")
                        .HasColumnType("int");

                    b.Property<int>("MaxHits")
                        .HasColumnType("int");

                    b.Property<int>("MaxTurns")
                        .HasColumnType("int");

                    b.Property<int>("MetaAilmentId")
                        .HasColumnType("int");

                    b.Property<int>("MetaCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MinHits")
                        .HasColumnType("int");

                    b.Property<int>("MinTurns")
                        .HasColumnType("int");

                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.Property<int>("StatChance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MetaAilmentId");

                    b.HasIndex("MetaCategoryId");

                    b.HasIndex("MoveId");

                    b.ToTable("MoveMetas");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMetaAilment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MoveMetaAilments");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMetaAilmentName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MoveMetaAilmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("MoveMetaAilmentId");

                    b.ToTable("MoveMetaAilmentNames");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMetaCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MoveMetaCategories");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMetaCategoryProse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MoveMetaCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("MoveMetaCategoryId");

                    b.ToTable("MoveMetaCategoryProses");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMetaStatChange", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Change")
                        .HasColumnType("int");

                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.HasIndex("StatId");

                    b.ToTable("MoveMetaStatChanges");
                });

            modelBuilder.Entity("PK.Common.Models.MoveName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("MoveId");

                    b.ToTable("MoveNames");
                });

            modelBuilder.Entity("PK.Common.Models.MoveTarget", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MoveTargets");
                });

            modelBuilder.Entity("PK.Common.Models.MoveTargetProse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MoveTargetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("MoveTargetId");

                    b.ToTable("MoveTargetProses");
                });

            modelBuilder.Entity("PK.Common.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("PK.Common.Models.RegionName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionNames");
                });

            modelBuilder.Entity("PK.Common.Models.Stat", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("DamageClassId")
                        .HasColumnType("int");

                    b.Property<int?>("GameIndex")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBattleOnly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DamageClassId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("PK.Common.Models.StatName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("StatId");

                    b.ToTable("StatNames");
                });

            modelBuilder.Entity("PK.Common.Models.SuperContestEffect", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Appeal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SuperContestEffects");
                });

            modelBuilder.Entity("PK.Common.Models.SuperContestEffectProse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FlavorText")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SuperContestEffectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("SuperContestEffectId");

                    b.ToTable("SuperContestEffectProses");
                });

            modelBuilder.Entity("PK.Common.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("DamageClassId")
                        .HasColumnType("int");

                    b.Property<int>("GenerationId")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DamageClassId");

                    b.HasIndex("GenerationId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("PK.Common.Models.TypeName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("TypeId");

                    b.ToTable("TypeNames");
                });

            modelBuilder.Entity("PK.Common.Models.Version", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VersionGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VersionGroupId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("PK.Common.Models.VersionGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("GenerationId")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenerationId");

                    b.ToTable("VersionGroups");
                });

            modelBuilder.Entity("PK.Common.Models.VersionGroupRegion", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("VersionGroupId")
                        .HasColumnType("int");

                    b.HasKey("RegionId", "VersionGroupId");

                    b.HasIndex("VersionGroupId");

                    b.ToTable("VersionGroupsRegions");
                });

            modelBuilder.Entity("PK.Common.Models.VersionName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LocalLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalLanguageId");

                    b.HasIndex("VersionId");

                    b.ToTable("VersionNames");
                });

            modelBuilder.Entity("PK.Common.Models.ContestEffectProse", b =>
                {
                    b.HasOne("PK.Common.Models.ContestEffect", "ContestEffect")
                        .WithMany()
                        .HasForeignKey("ContestEffectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContestEffect");

                    b.Navigation("LocalLanguage");
                });

            modelBuilder.Entity("PK.Common.Models.ContestTypeName", b =>
                {
                    b.HasOne("PK.Common.Models.ContestType", "ContestType")
                        .WithMany()
                        .HasForeignKey("ContestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContestType");

                    b.Navigation("LocalLanguage");
                });

            modelBuilder.Entity("PK.Common.Models.Generation", b =>
                {
                    b.HasOne("PK.Common.Models.Region", "MainRegion")
                        .WithMany()
                        .HasForeignKey("MainRegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainRegion");
                });

            modelBuilder.Entity("PK.Common.Models.GenerationName", b =>
                {
                    b.HasOne("PK.Common.Models.Generation", "Generation")
                        .WithMany()
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Generation");

                    b.Navigation("LocalLanguage");
                });

            modelBuilder.Entity("PK.Common.Models.LanguageName", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LocalLanguage");
                });

            modelBuilder.Entity("PK.Common.Models.Move", b =>
                {
                    b.HasOne("PK.Common.Models.ContestEffect", "ContestEffect")
                        .WithMany()
                        .HasForeignKey("ContestEffectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.ContestType", "ContestType")
                        .WithMany()
                        .HasForeignKey("ContestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveDamageClass", "DamageClass")
                        .WithMany()
                        .HasForeignKey("DamageClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Generation", "Generation")
                        .WithMany()
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.SuperContestEffect", "SuperContestEffect")
                        .WithMany()
                        .HasForeignKey("SuperContestEffectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveTarget", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContestEffect");

                    b.Navigation("ContestType");

                    b.Navigation("DamageClass");

                    b.Navigation("Effect");

                    b.Navigation("Generation");

                    b.Navigation("SuperContestEffect");

                    b.Navigation("Target");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PK.Common.Models.MoveBattleStyleProse", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveBattleStyle", "MoveBattleStyle")
                        .WithMany()
                        .HasForeignKey("MoveBattleStyleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("MoveBattleStyle");
                });

            modelBuilder.Entity("PK.Common.Models.MoveDamageClassProse", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveDamageClass", "MoveDamageClass")
                        .WithMany()
                        .HasForeignKey("MoveDamageClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("MoveDamageClass");
                });

            modelBuilder.Entity("PK.Common.Models.MoveEffectProse", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveEffect", "MoveEffect")
                        .WithMany()
                        .HasForeignKey("MoveEffectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("MoveEffect");
                });

            modelBuilder.Entity("PK.Common.Models.MoveFlagMap", b =>
                {
                    b.HasOne("PK.Common.Models.MoveFlag", "MoveFlag")
                        .WithMany()
                        .HasForeignKey("MoveFlagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Move");

                    b.Navigation("MoveFlag");
                });

            modelBuilder.Entity("PK.Common.Models.MoveFlagProse", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveFlag", "MoveFlag")
                        .WithMany()
                        .HasForeignKey("MoveFlagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("MoveFlag");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMeta", b =>
                {
                    b.HasOne("PK.Common.Models.MoveMetaAilment", "MetaAilment")
                        .WithMany()
                        .HasForeignKey("MetaAilmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveMetaCategory", "MetaCategory")
                        .WithMany()
                        .HasForeignKey("MetaCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MetaAilment");

                    b.Navigation("MetaCategory");

                    b.Navigation("Move");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMetaAilmentName", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveMetaAilment", "MoveMetaAilment")
                        .WithMany()
                        .HasForeignKey("MoveMetaAilmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("MoveMetaAilment");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMetaCategoryProse", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveMetaCategory", "MoveMetaCategory")
                        .WithMany()
                        .HasForeignKey("MoveMetaCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("MoveMetaCategory");
                });

            modelBuilder.Entity("PK.Common.Models.MoveMetaStatChange", b =>
                {
                    b.HasOne("PK.Common.Models.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Move");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("PK.Common.Models.MoveName", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("Move");
                });

            modelBuilder.Entity("PK.Common.Models.MoveTargetProse", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.MoveTarget", "MoveTarget")
                        .WithMany()
                        .HasForeignKey("MoveTargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("MoveTarget");
                });

            modelBuilder.Entity("PK.Common.Models.RegionName", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PK.Common.Models.Stat", b =>
                {
                    b.HasOne("PK.Common.Models.MoveDamageClass", "DamageClass")
                        .WithMany()
                        .HasForeignKey("DamageClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DamageClass");
                });

            modelBuilder.Entity("PK.Common.Models.StatName", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("PK.Common.Models.SuperContestEffectProse", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.SuperContestEffect", "SuperContestEffect")
                        .WithMany()
                        .HasForeignKey("SuperContestEffectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("SuperContestEffect");
                });

            modelBuilder.Entity("PK.Common.Models.Type", b =>
                {
                    b.HasOne("PK.Common.Models.MoveDamageClass", "DamageClass")
                        .WithMany()
                        .HasForeignKey("DamageClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PK.Common.Models.Generation", "Generation")
                        .WithMany()
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DamageClass");

                    b.Navigation("Generation");
                });

            modelBuilder.Entity("PK.Common.Models.TypeName", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PK.Common.Models.Version", b =>
                {
                    b.HasOne("PK.Common.Models.VersionGroup", "VersionGroup")
                        .WithMany()
                        .HasForeignKey("VersionGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("VersionGroup");
                });

            modelBuilder.Entity("PK.Common.Models.VersionGroup", b =>
                {
                    b.HasOne("PK.Common.Models.Generation", "Generation")
                        .WithMany()
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Generation");
                });

            modelBuilder.Entity("PK.Common.Models.VersionGroupRegion", b =>
                {
                    b.HasOne("PK.Common.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.VersionGroup", "VersionGroup")
                        .WithMany()
                        .HasForeignKey("VersionGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("VersionGroup");
                });

            modelBuilder.Entity("PK.Common.Models.VersionName", b =>
                {
                    b.HasOne("PK.Common.Models.Language", "LocalLanguage")
                        .WithMany()
                        .HasForeignKey("LocalLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PK.Common.Models.Version", "Version")
                        .WithMany()
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalLanguage");

                    b.Navigation("Version");
                });
#pragma warning restore 612, 618
        }
    }
}
